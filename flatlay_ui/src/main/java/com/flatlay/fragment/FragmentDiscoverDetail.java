package com.flatlay.fragment;import android.animation.AnimatorSet;import android.animation.ObjectAnimator;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.support.v4.view.ViewPager;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.HorizontalScrollView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TextView;import com.flatlay.BaseFragment;import com.flatlay.KikrApp;import com.flatlay.R;import com.flatlay.activity.HomeActivity;import com.flatlay.activity.ProductDetailWebViewActivity;import com.flatlay.adapter.ProductImageAdapter;import com.flatlay.dialog.ChooseCollectionDialog;import com.flatlay.dialog.CreateAccountDialog;import com.flatlay.dialog.ShareDialog;import com.flatlay.ui.ProductUI;import com.flatlay.utility.FontUtility;import com.flatlay.utility.MyMaterialContentOverflow2;import com.flatlay.utility.MySmallPageIndicator;import com.flatlay.utility.UiUpdate;import com.flatlaylib.api.AddCollectionApi;import com.flatlaylib.api.CartApi;import com.flatlaylib.api.CollectionApi;import com.flatlaylib.api.ProductBasedOnBrandApi;import com.flatlaylib.api.TwoTapApi;import com.flatlaylib.bean.CollectionList;import com.flatlaylib.bean.Product;import com.flatlaylib.db.UserPreference;import com.flatlaylib.service.ServiceCallback;import com.flatlaylib.service.ServiceException;import com.flatlaylib.service.res.CartRes;import com.flatlaylib.service.res.CollectionApiRes;import com.flatlaylib.service.res.ProductBasedOnBrandRes;import com.flatlaylib.utils.AlertUtils;import com.flatlaylib.utils.Syso;import com.google.android.gms.analytics.HitBuilders;import com.google.android.gms.analytics.Tracker;import com.google.gson.Gson;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * Created by RachelDi on 2/9/18. */public class FragmentDiscoverDetail extends BaseFragment implements View.OnClickListener {    private View mainView;    private MySmallPageIndicator indicator;    private ViewPager productImageView;    private List<String> productMultipleImages = new ArrayList<String>();    private ProductImageAdapter mAdapter;    private Product product;    private ImageView img1, likeIV, reviewIV, checkoutIV, storeIV, shareIV, squareCheck,            cartImg, squareCheck2, cancelImage;    private RelativeLayout parentRL, mainRL, LikeRL, reviewRL, checkoutRL, shareRL, storeRL;    private boolean isFirstTime = true;    private TextView text1, text2, text6, text7, text8, text9, addCollection, likeTV, reviewTV, checkoutTV,            shareTV, storeTV, button1, button2, textOR, brandName, addProducts,            removeproducts, text7_2, collectionName, floatBrand, floatPrice, cancelIcon,            text33, text44, text55, newCollectionName;    private Spinner text3, text4, text5;    private boolean isLike, isAdd = true, decided = false;    //            alreadyAdded = false;    private EditText nameYourCollection;    private LinearLayout addCollectionLayout1, addCollectionLayout2, checkLayout, backIconLayout,            cancel_layout1,cancel_layout2;    private ListView choicelist;    private String choice, color, size, quantity, collection_id, postlink, cartid,            finalNewCollectionName;    private ChooseCollectionDialog collectionListDialog;    private long down;    private LinearLayout productInflaterLayout, scroll_text7;    private HorizontalScrollView productLayout;    private List<Product> products = new ArrayList<Product>();    private MyMaterialContentOverflow2 overflow1;    private static String SHARE_POST_LINK = "Find it @FLATLAY http://flat-lay.com/product/";    private int page = 0;    private RelativeLayout collectionnamelayout;    private Animation shake;    private List<CollectionList> collectionLists;    private int index = 0;    private boolean choseExisitng = false;    private InputMethodManager imm;    public FragmentDiscoverDetail() {    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        mainView = inflater.inflate(R.layout.activity_discover_details, null);        return mainView;    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.add_products_button:                if (index == 0) {                    updateListAdd();                } else if (index == 1) {                    updateListRemove();                }                if (!choseExisitng) {                    if (products.size() > 0 && finalNewCollectionName != null) {                        cancel_layout1.setVisibility(View.GONE);                        checkLayout.setVisibility(View.VISIBLE);                        squareCheck.setVisibility(View.VISIBLE);                        squareCheck.setImageResource(R.drawable.square_check);                    } else {                        checkLayout.setVisibility(View.GONE);                        cancel_layout1.setVisibility(View.VISIBLE);                    }                } else {                    cancel_layout1.setVisibility(View.GONE);                    cancel_layout2.setVisibility(View.GONE);                    checkLayout.setVisibility(View.VISIBLE);                    squareCheck2.setVisibility(View.VISIBLE);                    squareCheck2.setImageResource(R.drawable.square_check);                }                break;            case R.id.cancelIcon:                addCollectionLayout2.setVisibility(View.GONE);                addCollectionLayout1.setVisibility(View.VISIBLE);                imm.hideSoftInputFromWindow(nameYourCollection.getApplicationWindowToken(), 0);                overflow1.getFocus();                break;            case R.id.cancelImage:                addCollectionLayout2.setVisibility(View.GONE);                addCollectionLayout1.setVisibility(View.VISIBLE);                addProducts.setText("");                imm.hideSoftInputFromWindow(nameYourCollection.getApplicationWindowToken(), 0);                overflow1.getFocus();                break;            case R.id.backIconLayout:                mContext.onBackPressed();                break;            case R.id.button2:                choseExisitng = true;                cancel_layout2.setVisibility(View.VISIBLE);                checkLayout.setVisibility(View.GONE);                collectionListDialog = new ChooseCollectionDialog(mContext);                collectionListDialog.show();                choicelist = (ListView) collectionListDialog.findViewById(R.id.collection_listing);                choicelist.setOnItemClickListener(new AdapterView.OnItemClickListener() {                    @Override                    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                        TextView textView = (TextView) view.findViewById(R.id.collection_name);                        String text = textView.getText().toString().trim();                        choice = text;                        collectionListDialog.dismiss();                        cancel_layout2.setVisibility(View.GONE);                        cancel_layout1.setVisibility(View.VISIBLE);                        addCollectionLayout1.setVisibility(View.GONE);                        addProducts.setVisibility(View.VISIBLE);                        addCollectionLayout2.setVisibility(View.VISIBLE);                        squareCheck.setVisibility(View.GONE);                        squareCheck2.setVisibility(View.VISIBLE);                        productInflaterLayout.setVisibility(View.VISIBLE);                        nameYourCollection.setVisibility(View.GONE);                        newCollectionName.setVisibility(View.GONE);                        productLayout.setVisibility(View.VISIBLE);                        collectionName.setVisibility(View.VISIBLE);                        collectionName.setText(choice);                        collectionName.setTextColor(Color.WHITE);                        page = 0;                        collection_id = collectionListDialog.geCheckedCollection(i).getId();                        productInflaterLayout.removeAllViews();                        products.clear();                        initProducts();                    }                });                break;        }    }    public void getProducts() {        final ProductBasedOnBrandApi productBasedOnBrandApi =                new ProductBasedOnBrandApi(new ServiceCallback() {                    @Override                    public void handleOnSuccess(Object object) {                        ProductBasedOnBrandRes productBasedOnBrandRes = (ProductBasedOnBrandRes) object;                        List<Product> data = productBasedOnBrandRes.getData();                        products.addAll(data);                        productInflaterLayout.removeAllViews();                        Log.e("hehehe", "" + String.valueOf(products.size()));                        productInflaterLayout.                                addView(new ProductUI(mContext, 200, 200, products, false).getView());                        //IMPORTANT: assume call api one time, we can get 15 products at most                        if (data.size() == 15) {                            page++;                            getProducts();                        }                        index = 0;                        for (int i = 0; i < products.size(); i++) {                            if (products.get(i).getId().equals(product.getId())) {                                index = 1;                                addProducts.setText("Remove Product");                                isAdd = false;                                break;                            }                        }                        if (index == 0)                            addProducts.setText("Add Product");                    }                    @Override                    public void handleOnFailure(ServiceException exception, Object object) {                    }                });        productBasedOnBrandApi.getProductsBasedOnCollectionList                (UserPreference.getInstance().getUserID(), String.valueOf(page), collection_id);        productBasedOnBrandApi.execute();    }    public void initProducts() {        getProducts();        productLayout.scrollTo(0, 0);    }    public void validAddToCart() {        quantity = text3.getSelectedItem().toString().trim();        if (quantity.equals("Quantity")) {            text3.setBackgroundResource(R.drawable.btn_whitebg_red_stroke);            text3.startAnimation(shake);            text6.setBackgroundResource(R.drawable.btn_graybg);        } else {            text3.setBackgroundResource(R.drawable.btn_whitebg);        }        color = text4.getSelectedItem().toString().trim();        if (color.equals("Color")) {            text4.setBackgroundResource(R.drawable.btn_whitebg_red_stroke);            text4.startAnimation(shake);            text6.setBackgroundResource(R.drawable.btn_graybg);        } else {            text4.setBackgroundResource(R.drawable.btn_whitebg);        }        size = text5.getSelectedItem().toString().trim();        if (size.equals("Size")) {            text5.setBackgroundResource(R.drawable.btn_whitebg_red_stroke);            text5.startAnimation(shake);            text6.setBackgroundResource(R.drawable.btn_graybg);        } else {            text5.setBackgroundResource(R.drawable.btn_whitebg);        }    }    @Override    public void initUI(Bundle savedInstanceState) {        imm = (InputMethodManager)                mContext.getSystemService(mContext.INPUT_METHOD_SERVICE);        shake = AnimationUtils.loadAnimation(mContext, R.anim.shake);        cartImg = (ImageView) mainView.findViewById(R.id.cartImg);        indicator = (MySmallPageIndicator) mainView.findViewById(R.id.indicator);        productImageView = (ViewPager) mainView.findViewById(R.id.productImageView);        addCollectionLayout1 = (LinearLayout) mainView.findViewById(R.id.add_collection_layout);        cancel_layout1 = (LinearLayout) mainView.findViewById(R.id.cancel_layout1);        cancel_layout2 = (LinearLayout) mainView.findViewById(R.id.cancel_layout2);        checkLayout = (LinearLayout) mainView.findViewById(R.id.square_check_layout);        backIconLayout = (LinearLayout) mainView.findViewById(R.id.backIconLayout);        addCollectionLayout2 = (LinearLayout) mainView.findViewById(R.id.add_collection_layout2);        addCollection = (TextView) mainView.findViewById(R.id.add_collection_text);        addCollection.setTypeface(FontUtility.setMontserratRegular(mContext));        productLayout = (HorizontalScrollView) mainView.findViewById(R.id.productLayout);        productInflaterLayout = (LinearLayout) mainView.findViewById(R.id.productInflaterLayout);        scroll_text7 = (LinearLayout) mainView.findViewById(R.id.scroll_text7);        WindowManager.LayoutParams lp = mContext.getWindow().getAttributes();        mContext.getWindow().setAttributes(lp);        img1 = (ImageView) mainView.findViewById(R.id.img1);        img1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (isFirstTime)                    startAnimation();            }        });        collectionnamelayout = (RelativeLayout) mainView.findViewById(R.id.collectionnamelayout);        likeIV = (ImageView) mainView.findViewById(R.id.likeIV);        reviewIV = (ImageView) mainView.findViewById(R.id.reviewIV);        checkoutIV = (ImageView) mainView.findViewById(R.id.checkoutIV);        storeIV = (ImageView) mainView.findViewById(R.id.storeIV);        shareIV = (ImageView) mainView.findViewById(R.id.shareIV);        cancelIcon = (TextView) mainView.findViewById(R.id.cancelIcon);        cancelIcon.setTypeface(FontUtility.setMontserratLight(mContext));        cancelImage = (ImageView) mainView.findViewById(R.id.cancelImage);        parentRL = (RelativeLayout) mainView.findViewById(R.id.parentRL);        mainRL = (RelativeLayout) mainView.findViewById(R.id.mainRL);        LikeRL = (RelativeLayout) mainView.findViewById(R.id.likeRL);        reviewRL = (RelativeLayout) mainView.findViewById(R.id.reviewRL);        checkoutRL = (RelativeLayout) mainView.findViewById(R.id.checkoutRL);        shareRL = (RelativeLayout) mainView.findViewById(R.id.shareRL);        storeRL = (RelativeLayout) mainView.findViewById(R.id.storeRL);        likeTV = (TextView) mainView.findViewById(R.id.likeTV);        likeTV.setTypeface(FontUtility.setMontserratLight(mContext));        likeIV.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                switch (motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN:                        likeTV.setVisibility(View.VISIBLE);                        likeIV.setImageResource(R.drawable.likegreen);                        down = System.currentTimeMillis();                        break;                    case MotionEvent.ACTION_UP:                        likeIV.setImageResource(R.drawable.small_gray_heart);                        likeTV.setVisibility(View.GONE);                        long diff = System.currentTimeMillis() - down;                        if (diff < 150) {                            if (UserPreference.getInstance().getPassword() == "" ||                                    UserPreference.getInstance().getEmail() == "" ||                                    UserPreference.getInstance().getUserName() == "") {                                CreateAccountDialog createAccountDialog =                                        new CreateAccountDialog(mContext);                                createAccountDialog.show();                            } else {                                ((HomeActivity) mContext).likeInspiration(product, new UiUpdate() {                                    @Override                                    public void updateUi() {                                    }                                });                            }                        }                        break;                }                return false;            }        });        reviewTV = (TextView) mainView.findViewById(R.id.reviewTV);        reviewTV.setTypeface(FontUtility.setMontserratLight(mContext));        reviewIV.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                switch (motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN:                        reviewIV.setImageResource(R.drawable.tealstar);                        reviewTV.setVisibility(View.VISIBLE);                        down = System.currentTimeMillis();                        break;                    case MotionEvent.ACTION_UP:                        reviewIV.setImageResource(R.drawable.small_gray_star);                        reviewTV.setVisibility(View.GONE);                        break;                }                return false;            }        });        checkoutTV = (TextView) mainView.findViewById(R.id.checkoutTV);        checkoutTV.setTypeface(FontUtility.setMontserratLight(mContext));        checkoutIV.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                switch (motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN:                        checkoutIV.setImageResource(com.flatlay.R.drawable.ic_cart_selected);                        checkoutTV.setVisibility(View.VISIBLE);                        down = System.currentTimeMillis();                        break;                    case MotionEvent.ACTION_UP:                        checkoutIV.setImageResource(com.flatlay.R.drawable.small_gray_cart);                        checkoutTV.setVisibility(View.GONE);                        long diff = System.currentTimeMillis() - down;                        if (diff < 150) {                            overflow1.triggerSlide();                        }                        break;                }                return false;            }        });        shareTV = (TextView) mainView.findViewById(R.id.shareTV);        shareTV.setTypeface(FontUtility.setMontserratLight(mContext));        shareIV.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                switch (motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN:                        shareIV.setImageResource(R.drawable.sharegreen1);                        shareTV.setVisibility(View.VISIBLE);                        down = System.currentTimeMillis();                        break;                    case MotionEvent.ACTION_UP:                        shareIV.setImageResource(R.drawable.small_gray_kopie);                        shareTV.setVisibility(View.GONE);                        long diff = System.currentTimeMillis() - down;                        if (diff < 150) {                            postlink = SHARE_POST_LINK + product.getId();                            ShareDialog dialog = new ShareDialog(mContext,                                    product.getProductimageurl(), postlink);                            dialog.show();                            dialog.setOnDismissListener(new DialogInterface.OnDismissListener() {                                @Override                                public void onDismiss(DialogInterface dialogInterface) {                                    shareIV.setImageResource(R.drawable.small_gray_kopie);                                }                            });                        }                        break;                }                return false;            }        });        storeTV = (TextView) mainView.findViewById(R.id.storeTV);        storeTV.setTypeface(FontUtility.setMontserratLight(mContext));        storeIV.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                switch (motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN:                        storeIV.setImageResource(R.drawable.sitegreen);                        storeTV.setVisibility(View.VISIBLE);                        down = System.currentTimeMillis();                        break;                    case MotionEvent.ACTION_UP:                        storeIV.setImageResource(R.drawable.small_gray_store);                        storeTV.setVisibility(View.GONE);                        long diff = System.currentTimeMillis() - down;                        if (diff < 150) {                            Intent intent = new Intent(mContext, ProductDetailWebViewActivity.class);                            intent.putExtra("data", new Gson().toJson(product));                            Log.e("product", product.getProducturl());                            mContext.startActivity(intent);                        }                        break;                }                return false;            }        });        LikeRL.setVisibility(View.GONE);        reviewRL.setVisibility(View.GONE);        checkoutRL.setVisibility(View.GONE);        shareRL.setVisibility(View.GONE);        storeRL.setVisibility(View.GONE);        button1 = (TextView) mainView.findViewById(R.id.button1);        button1.setTypeface(FontUtility.setMontserratLight(mContext));        button1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {//                alreadyAdded = false;                choseExisitng = false;                cancel_layout1.setVisibility(View.VISIBLE);                cancel_layout2.setVisibility(View.GONE);                addProducts.setVisibility(View.INVISIBLE);                addProducts.setText("Add Product");                nameYourCollection.setVisibility(View.VISIBLE);                newCollectionName.setVisibility(View.GONE);                nameYourCollection.requestFocus();                addCollectionLayout1.setVisibility(View.GONE);                addCollectionLayout2.setVisibility(View.VISIBLE);//                checkLayout.setVisibility(View.VISIBLE);//                squareCheck.setVisibility(View.VISIBLE);                squareCheck2.setVisibility(View.GONE);//                squareCheck.setImageResource(R.drawable.white_check_icon);                nameYourCollection.setVisibility(View.VISIBLE);                collectionName.setVisibility(View.GONE);                addProducts.setText("Add Product");                productInflaterLayout.removeAllViews();                products.clear();                nameYourCollection.setText("");                collection_id = null;            }        });        button2 = (TextView) mainView.findViewById(R.id.button2);        button2.setTypeface(FontUtility.setMontserratLight(mContext));        textOR = (TextView) mainView.findViewById(R.id.textOR);        textOR.setTypeface(FontUtility.setMontserratLight(mContext));        brandName = (TextView) mainView.findViewById(R.id.brandName);        brandName.setTypeface(FontUtility.setMontserratLight(mContext));        floatBrand = (TextView) mainView.findViewById(R.id.floatBrand);        floatBrand.setTypeface(FontUtility.setMontserratLight(mContext));        floatPrice = (TextView) mainView.findViewById(R.id.floatPrice);        floatPrice.setTypeface(FontUtility.setMontserratLight(mContext));        addProducts = (TextView) mainView.findViewById(R.id.add_products_button);        addProducts.setTypeface(FontUtility.setMontserratLight(mContext));        collectionName = (TextView) mainView.findViewById(R.id.collection_name_text);        collectionName.setTypeface(FontUtility.setMontserratLight(mContext));        newCollectionName = (TextView) mainView.findViewById(R.id.new_collection_name);        newCollectionName.setTypeface(FontUtility.setMontserratLight(mContext));        nameYourCollection = (EditText) mainView.findViewById(R.id.create_collection_text);        nameYourCollection.setTypeface(FontUtility.setMontserratLight(mContext));        nameYourCollection.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (MotionEvent.ACTION_DOWN == event.getAction()) {                    nameYourCollection.setCursorVisible(true);                }                return false;            }        });        nameYourCollection.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {                if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_ENTER) {                    if (validCollectionName()) {//                        addCollection();                        checkLayout.setVisibility(View.GONE);                        cancel_layout1.setVisibility(View.VISIBLE);                        nameYourCollection.setCursorVisible(false);                        nameYourCollection.setVisibility(View.GONE);                        newCollectionName.setVisibility(View.VISIBLE);                        newCollectionName.setText(finalNewCollectionName);                        addProducts.setVisibility(View.VISIBLE);                        overflow1.getFocus();                    } else                        AlertUtils.showToast(mContext, "Please enter collection name");                    return true;                }                return false;            }        });        squareCheck = (ImageView) mainView.findViewById(R.id.square_check);        squareCheck.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                imm.hideSoftInputFromWindow(nameYourCollection.getApplicationWindowToken(), 0);                nameYourCollection.setCursorVisible(false);                if (validCollectionName() && addProducts.getVisibility() == View.INVISIBLE) {                    addProducts.setVisibility(View.VISIBLE);                    nameYourCollection.setVisibility(View.GONE);                    newCollectionName.setVisibility(View.VISIBLE);                    newCollectionName.setText(finalNewCollectionName);                    squareCheck.setVisibility(View.GONE);                    cancel_layout1.setVisibility(View.VISIBLE);                    productInflaterLayout.setVisibility(View.VISIBLE);                    overflow1.getFocus();                } else if (validCollectionName() && addProducts.getVisibility() == View.VISIBLE) {                    if (products.size() == 1 && validCollectionName()) {                        checkLayout.setVisibility(View.VISIBLE);                        squareCheck.setImageResource(R.drawable.square_check);                        addCollection();                    }                    overflow1.getFocus();                } else                    AlertUtils.showToast(mContext, "Please enter collection name");            }        });        squareCheck2 = (ImageView) mainView.findViewById(R.id.square_check2);        squareCheck2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                squareCheck2.setVisibility(View.GONE);                cancel_layout1.setVisibility(View.GONE);                cancel_layout2.setVisibility(View.VISIBLE);//                cancelIcon.setText("CLOSE");                if (index == 1) {                    addProductInCollection(collection_id, product);                } else {                    removeProductInCollection(collection_id, product);                }            }        });        nameYourCollection.setOnFocusChangeListener(new View.OnFocusChangeListener() {            @Override            public void onFocusChange(View view, boolean hasFocus) {                if (hasFocus) {                    overflow1.getFocus();                } else {                    overflow1.loseFocus();                }            }        });        CollectionTextWatcher watcher = new CollectionTextWatcher();        nameYourCollection.addTextChangedListener(watcher);        overflow1 = (MyMaterialContentOverflow2) mainView.findViewById(R.id.overflow1);        button2 = (TextView) mainView.findViewById(R.id.button2);        button2.setTypeface(FontUtility.setMontserratLight(mContext));        text1 = (TextView) mainView.findViewById(R.id.text1);        text1.setTypeface(FontUtility.setMontserratLight(mContext));        text2 = (TextView) mainView.findViewById(R.id.text2);        text2.setTypeface(FontUtility.setMontserratLight(mContext));        text7_2 = (TextView) mainView.findViewById(R.id.text7_2);        text7_2.setTypeface(FontUtility.setMontserratLight(mContext));        text3 = (Spinner) mainView.findViewById(R.id.text3);        ArrayList<String> list3 = new ArrayList<String>();        list3.add("Quantity");        list3.add("1");        list3.add("2");        list3.add("3");        ArrayAdapter adapter3 =                new ArrayAdapter<String>(mContext, R.layout.myspinneritem, list3) {                    @Override                    public View getView(int position, View convertView, ViewGroup parent) {                        View view = super.getView(position, convertView, parent);                        ((TextView) view).setTypeface(FontUtility.setMontserratLight(mContext));                        return view;                    }                    public View getDropDownView(int position, View convertView, ViewGroup parent) {                        View view = super.getDropDownView(position, convertView, parent);                        ((TextView) view).setTypeface(FontUtility.setMontserratLight(mContext));                        return view;                    }                };        adapter3.setDropDownViewResource(R.layout.myspinnerdropdown);        text3.setAdapter(adapter3);        text3.setSelection(0);        text4 = (Spinner) mainView.findViewById(R.id.text4);        ArrayList<String> list4 = new ArrayList<String>();        list4.add("Color");        list4.add("White");        list4.add("Black");        list4.add("Pink");        ArrayAdapter adapter4 =                new ArrayAdapter<String>(mContext, R.layout.myspinneritem, list4) {                    @Override                    public View getView(int position, View convertView, ViewGroup parent) {                        View view = super.getView(position, convertView, parent);                        ((TextView) view).setTypeface(FontUtility.setMontserratLight(mContext));                        return view;                    }                    public View getDropDownView(int position, View convertView, ViewGroup parent) {                        View view = super.getDropDownView(position, convertView, parent);                        ((TextView) view).setTypeface(FontUtility.setMontserratLight(mContext));                        return view;                    }                };        adapter4.setDropDownViewResource(R.layout.myspinnerdropdown);        text4.setAdapter(adapter4);        text4.setSelection(0);        text5 = (Spinner) mainView.findViewById(R.id.text5);        ArrayList<String> list5 = new ArrayList<String>();        list5.add("Size");        list5.add("Small");        list5.add("Medium");        list5.add("Large");        ArrayAdapter adapter5 =                new ArrayAdapter<String>(mContext, R.layout.myspinneritem, list5) {                    @Override                    public View getView(int position, View convertView, ViewGroup parent) {                        View view = super.getView(position, convertView, parent);                        ((TextView) view).setTypeface(FontUtility.setMontserratLight(mContext));                        return view;                    }                    public View getDropDownView(int position, View convertView, ViewGroup parent) {                        View view = super.getDropDownView(position, convertView, parent);                        ((TextView) view).setTypeface(FontUtility.setMontserratLight(mContext));                        return view;                    }                };        adapter5.setDropDownViewResource(R.layout.myspinnerdropdown);        text5.setAdapter(adapter5);        text5.setSelection(0);        text6 = (TextView) mainView.findViewById(R.id.text6);        text6.setTypeface(FontUtility.setMontserratLight(mContext));        text6.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                addProductToCart(product);            }        });        text3.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                String selectedItem = parent.getItemAtPosition(position).toString().trim();                if (!selectedItem.equals("Quantity")                        && !text4.getSelectedItem().toString().trim().equals("Color")                        && !text5.getSelectedItem().toString().trim().equals("Size")) {                    text6.setBackgroundResource(R.drawable.flatlayloginbordernew7);                }                validAddToCart();            }            public void onNothingSelected(AdapterView<?> parent) {                validAddToCart();            }        });        text4.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                String selectedItem = parent.getItemAtPosition(position).toString().trim();                if (!selectedItem.equals("Color")                        && !text3.getSelectedItem().toString().trim().equals("Quantity")                        && !text5.getSelectedItem().toString().trim().equals("Size")) {                    text6.setBackgroundResource(R.drawable.flatlayloginbordernew7);                }                validAddToCart();            }            public void onNothingSelected(AdapterView<?> parent) {                validAddToCart();            }        });        text5.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                String selectedItem = parent.getItemAtPosition(position).toString().trim();                if (!selectedItem.equals("Size")                        && !text3.getSelectedItem().toString().trim().equals("Quantity")                        && !text4.getSelectedItem().toString().trim().equals("Color")) {                    text6.setBackgroundResource(R.drawable.flatlayloginbordernew7);                }                validAddToCart();            }            public void onNothingSelected(AdapterView<?> parent) {                validAddToCart();            }        });        text7 = (TextView) mainView.findViewById(R.id.text7);        text7.setTypeface(FontUtility.setMontserratLight(mContext));        text7.setMaxLines(3);        text9 = (TextView) mainView.findViewById(R.id.text9);        text9.setTypeface(FontUtility.setMontserratRegular(mContext));        text8 = (TextView) mainView.findViewById(R.id.text8);        text8.setTypeface(FontUtility.setMontserratLight(mContext));        text8.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                overflow1.setOpen();                if (text8.getText().toString().trim().equals("View More")) {                    text7.setMaxLines(Integer.MAX_VALUE);                    text7.setVisibility(View.GONE);                    scroll_text7.setVisibility(View.VISIBLE);                    text8.setText("View Less");                    overflow1.setOpen();                } else {                    text7.setMaxLines(3);                    text7.setVisibility(View.VISIBLE);                    scroll_text7.setVisibility(View.GONE);                    text8.setText("View More");                    overflow1.setOpen();                }            }        });        cartImg.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                overflow1.triggerSlide();            }        });    }    @Override    public void refreshData(Bundle bundle) {    }    @Override    public void setClickListener() {        likeIV.setOnClickListener(this);        reviewIV.setOnClickListener(this);        checkoutIV.setOnClickListener(this);        storeIV.setOnClickListener(this);        shareIV.setOnClickListener(this);        cancelIcon.setOnClickListener(this);        cancelImage.setOnClickListener(this);        backIconLayout.setOnClickListener(this);        button2.setOnClickListener(this);        addProducts.setOnClickListener(this);    }    public void getAltImages() {        TwoTapApi twoTapApi = new TwoTapApi(new ServiceCallback() {            @Override            public void handleOnSuccess(Object object) {                getAltImagesHelper(object);            }            @Override            public void handleOnFailure(ServiceException exception, Object object) {            }        });        twoTapApi.getCartStatus(cartid);        twoTapApi.execute();    }    public void getAltImagesHelper(Object object) {        try {            JSONObject jsonObject = new JSONObject(object.toString());            JSONObject sites;            try {                sites = jsonObject.getJSONObject("sites");                Iterator keys = sites.keys();                while (keys.hasNext()) {                    String currentDynamicKey = (String) keys.next();                    JSONObject currentDynamicValue = sites.getJSONObject(currentDynamicKey);                    JSONObject add_to_cart = null;                    try {                        add_to_cart = currentDynamicValue.getJSONObject("add_to_cart");                        Iterator data = add_to_cart.keys();                        while (data.hasNext()) {                            String currentKey = (String) data.next();                            Syso.info("currentKey   " + currentKey);                            JSONObject value = add_to_cart.getJSONObject(currentKey);                            if (value.has("alt_images")) {                                JSONArray alt_images = value.getJSONArray("alt_images");                                for (int i = 0; i < alt_images.length(); i++) {                                    productMultipleImages.add(alt_images.getString(i));                                    mAdapter.notifyDataSetChanged();                                }                            } else if (value.has("image")) {                                productMultipleImages.add(value.getString("image"));                                mAdapter.notifyDataSetChanged();                            }                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                }            } catch (Exception e1) {                e1.printStackTrace();            }        } catch (JSONException e) {            e.printStackTrace();        }    }    private void getCartId() {        TwoTapApi twoTapApi = new TwoTapApi(new ServiceCallback() {            @Override            public void handleOnSuccess(Object object) {                try {                    if (object != null) {                        JSONObject jsonObject = new JSONObject(object.toString());                        cartid = (String) jsonObject.get("cart_id");                        getAltImages();                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }            @Override            public void handleOnFailure(ServiceException exception, Object object) {            }        });        List<String> products = new ArrayList<String>();        products.add(product.getProducturl());        twoTapApi.execute();        twoTapApi.getCartId(products);        twoTapApi.execute();    }    @Override    public void setData(Bundle bundle) {        product = (Product) bundle.getSerializable("data");        // productLists.add(product);        double productPrice = Double.parseDouble(product.getRetailprice());        if (!TextUtils.isEmpty(product.getSaleprice()) && !product.getSaleprice().equals("0")                && !product.getSaleprice().equals(product.getRetailprice())) {            productPrice = Double.parseDouble(product.getSaleprice());        }        com.google.android.gms.analytics.ecommerce.Product prod =                new com.google.android.gms.analytics.ecommerce.Product()                        .setId(product.getId())                        .setName(product.getProductname())                        .setCategory(product.getPrimarycategory())                        .setPrice(productPrice);        HitBuilders.ScreenViewBuilder builder = new HitBuilders.ScreenViewBuilder()                .addImpression(prod, "Product Impression");        Tracker t = ((KikrApp) mContext.getApplication()).getTracker(KikrApp.TrackerName.APP_TRACKER);        t.setScreenName("Discover Detail");        t.send(builder.build());        text7.setText(getDescription());        text7_2.setText(getDescription());        brandName.setText(product.getMerchantname());        floatBrand.setText(product.getMerchantname());        floatPrice.setText("$" + productPrice);//        addProducts.setText("Add Product");        setDetails();    }    private CharSequence getDescription() {        int sDescLength = product.getShortproductdesc().length();        int lDescpLength = product.getLongproductdesc().length();        if (sDescLength != 0 && lDescpLength != 0) {            return sDescLength < lDescpLength ? product.getShortproductdesc() :                    product.getLongproductdesc();        } else {            return lDescpLength == 0 ? product.getShortproductdesc() : product.getLongproductdesc();        }    }    private void setDetails() {        productMultipleImages.add(product.getProductimageurl());        getCartId();        mAdapter = new ProductImageAdapter(mContext, productMultipleImages, product.getProducturl(),                product);        productImageView.setAdapter(mAdapter);        indicator.setViewPager(productImageView);    }    private void startAnimation() {        int width = img1.getWidth();        LikeRL.setVisibility(View.VISIBLE);        startLikeArcAnimation(-(float) (width * 1.2), 0);        reviewRL.setVisibility(View.VISIBLE);        startDisArcAnimation(-(float) (width * 0.8), -(float) (width * 0.8));        checkoutRL.setVisibility(View.VISIBLE);        startCheckArcAnimation(0, -(float) (width * 1.2));        storeRL.setVisibility(View.VISIBLE);        startStoreArcAnimation((float) (width * 0.9), -(float) (width * 0.8));        shareRL.setVisibility(View.VISIBLE);        startShareArcAnimation((float) (width * 1.3), 0);    }    private void startLikeArcAnimation(float toX, float toY) {        ObjectAnimator translationLeft = ObjectAnimator.ofFloat(LikeRL, "X",                img1.getX(), toX);        translationLeft.setDuration(500);        translationLeft.start();        isFirstTime = false;    }    private void startDisArcAnimation(float toX, float toY) {        AnimatorSet animatorSet = new AnimatorSet();        ObjectAnimator translationLeft = ObjectAnimator.ofFloat(reviewRL, "X", img1.getX(), toX);        ObjectAnimator translationUp = ObjectAnimator.ofFloat(reviewRL, "Y", img1.getY(), toY);        animatorSet.setDuration(500);        animatorSet.playTogether(translationLeft, translationUp);        animatorSet.start();    }    private void startCheckArcAnimation(float toX, float toY) {        ObjectAnimator translationUp = ObjectAnimator.ofFloat(checkoutRL, "Y",                img1.getY(), toY);        translationUp.setDuration(500);        translationUp.start();    }    private void startStoreArcAnimation(float toX, float toY) {        AnimatorSet animatorSet = new AnimatorSet();        ObjectAnimator translationRight = ObjectAnimator.ofFloat(storeRL, "X", img1.getX(), toX);        ObjectAnimator translationUp = ObjectAnimator.ofFloat(storeRL, "Y", img1.getY(), toY);        animatorSet.setDuration(500);        animatorSet.playTogether(translationRight, translationUp);        animatorSet.start();    }    private void startShareArcAnimation(float toX, float toY) {        ObjectAnimator translationRight = ObjectAnimator.ofFloat(shareRL, "X",                img1.getX(), toX);        translationRight.setDuration(500);        translationRight.start();    }    public boolean validAddToCartWithToast() {        quantity = text3.getSelectedItem().toString().trim();        if (quantity.equals("Quantity")) {            AlertUtils.showToast(mContext, "Please select quantity");            text3.setBackgroundResource(R.drawable.btn_whitebg_red_stroke);            text3.startAnimation(shake);            text6.setBackgroundResource(R.drawable.btn_graybg);            return false;        } else {            text3.setBackgroundResource(R.drawable.btn_whitebg);        }        color = text4.getSelectedItem().toString().trim();        if (color.equals("Color")) {            AlertUtils.showToast(mContext, "Please select color");            text4.setBackgroundResource(R.drawable.btn_whitebg_red_stroke);            text4.startAnimation(shake);            text6.setBackgroundResource(R.drawable.btn_graybg);            return false;        } else {            text4.setBackgroundResource(R.drawable.btn_whitebg);        }        size = text5.getSelectedItem().toString().trim();        if (size.equals("Size")) {            AlertUtils.showToast(mContext, "Please select size");            text4.setBackgroundResource(R.drawable.btn_whitebg_red_stroke);            text5.startAnimation(shake);            text6.setBackgroundResource(R.drawable.btn_graybg);            return false;        } else {            text5.setBackgroundResource(R.drawable.btn_whitebg);        }        return true;    }    public void addProductToCart(Product product) {        if (!validAddToCartWithToast()) {            validAddToCart();            return;        }        final CartApi cartApi = new CartApi(new ServiceCallback() {            @Override            public void handleOnSuccess(Object object) {                if (object != null) {                    UserPreference.getInstance().incCartCount();                    ((HomeActivity) mContext).refreshCartCount();                    AlertUtils.showToast(mContext, "Added to cart");                    checkoutIV.setImageResource(R.drawable.small_gray_cart);                }            }            @Override            public void handleOnFailure(ServiceException exception,                                        Object object) {                Syso.info("In handleOnFailure>>" + object);                if (object != null) {                    CartRes response = (CartRes) object;                    AlertUtils.showToast(mContext, response.getMessage());                } else {                    AlertUtils.showToast(mContext, R.string.invalid_response);                    checkoutIV.setImageResource(R.drawable.small_gray_cart);                }            }        });        String fromUserId = product.getFrom_user_id() == null ? "" : product.getFrom_user_id();        String fromCollection = product.getFrom_collection_id() == null ? "" :                product.getFrom_collection_id();        cartApi.addToCart(UserPreference.getInstance().getUserID(), product.getId(), "1",                UserPreference.getInstance().getCartID(), fromUserId, fromCollection, "", "", product.getSelected_values());        cartApi.execute();    }    private void addProductInCollection(String collection_id, Product product) {        String from_user_id = TextUtils.isEmpty(product.getFrom_user_id()) ? "" :                product.getFrom_user_id();        String from_collection_id = TextUtils.isEmpty(product.getFrom_collection_id()) ? "" :                product.getFrom_collection_id();        final CollectionApi collectionApi = new CollectionApi(new ServiceCallback() {            @Override            public void handleOnSuccess(Object object) {                CollectionApiRes collectionApiRes = (CollectionApiRes) object;                AlertUtils.showToast(mContext, collectionApiRes.getMessage());                checkLayout.setVisibility(View.GONE);                cancel_layout1.setVisibility(View.GONE);                cancel_layout2.setVisibility(View.VISIBLE);//                cancelIcon.setText("CLOSE");            }            @Override            public void handleOnFailure(ServiceException exception, Object object) {                if (object != null) {                    CollectionApiRes response = (CollectionApiRes) object;                    AlertUtils.showToast(mContext, response.getMessage());                } else {                    AlertUtils.showToast(mContext, R.string.invalid_response);                }            }        });        collectionApi.addProductInCollection(UserPreference.getInstance().getUserID(),                collection_id, product.getId(), from_user_id, from_collection_id,                product.getProductimageurl());        collectionApi.execute();    }    private void removeProductInCollection(String collection_id, Product product) {        final CollectionApi collectionApi = new CollectionApi(new ServiceCallback() {            @Override            public void handleOnSuccess(Object object) {                AlertUtils.showToast(mContext, "Product removed");                checkLayout.setVisibility(View.GONE);//                cancelIcon.setText("CLOSE");                cancel_layout2.setVisibility(View.VISIBLE);                cancel_layout1.setVisibility(View.GONE);            }            @Override            public void handleOnFailure(ServiceException exception, Object object) {                if (object != null) {                    CollectionApiRes response = (CollectionApiRes) object;                    AlertUtils.showToast(mContext, "No change made");                } else {                    AlertUtils.showToast(mContext, R.string.invalid_response);                }            }        });        collectionApi.deleteProductFromCollection(UserPreference.getInstance().getUserID(),                collection_id, product.getId());        collectionApi.execute();    }    public boolean validCollectionName() {        String name = nameYourCollection.getText().toString();        if (name != null && name.length() != 0) {            finalNewCollectionName = name.trim();            return true;        }        return false;    }    private class CollectionTextWatcher implements TextWatcher {        @Override        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {        }        @Override        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {//            alreadyAdded = false;            if (validCollectionName()) {                Log.e("xxxxxxxx", "CCCCCCC");                cancel_layout2.setVisibility(View.GONE);                cancel_layout1.setVisibility(View.GONE);                checkLayout.setVisibility(View.VISIBLE);                Log.e("xxxxxxx1", "" + checkLayout.getVisibility());                Log.e("xxxxxxx2", "" + squareCheck.getVisibility());                squareCheck.setVisibility(View.VISIBLE);                squareCheck.setImageResource(R.drawable.square_check);            } else {                Log.e("xxxxxxxx", "bbbb");                checkLayout.setVisibility(View.GONE);                cancel_layout2.setVisibility(View.GONE);                cancel_layout1.setVisibility(View.VISIBLE);            }        }        @Override        public void afterTextChanged(Editable editable) {        }    }    private void addCollection() {        final AddCollectionApi collectionApi = new AddCollectionApi(new ServiceCallback() {            @Override            public void handleOnSuccess(Object object) {                AlertUtils.showToast(mContext, "Collection added");                nameYourCollection.clearFocus();                getNewCollectionId();            }            @Override            public void handleOnFailure(ServiceException exception, Object object) {            }        });//        String newCollection = nameYourCollection.getText().toString().trim();        if (finalNewCollectionName != null && finalNewCollectionName.length() > 0)            collectionApi.addNewCollection(finalNewCollectionName);        collectionApi.execute();    }    private void updateListAdd() {        products.add(0, product);        index = 1;        addProducts.setText("Remove Product");        productInflaterLayout.removeAllViews();        productInflaterLayout.addView(new ProductUI(mContext, 200, 200, products, false).getView());    }    private void updateListRemove() {        index = 0;        addProducts.setText("Add Product");        int size = products.size();        for (int i = 0; i < size; i++) {            if (products.get(i).getId().equals(product.getId())) {                products.remove(products.get(i));                break;            }        }        productInflaterLayout.removeAllViews();        productInflaterLayout.addView(new ProductUI(mContext, 200, 200, products, false).getView());    }    public void getNewCollectionId() {        final CollectionApi collectionApi = new CollectionApi(new ServiceCallback() {            @Override            public void handleOnSuccess(Object object) {                CollectionApiRes collectionApiRes = (CollectionApiRes) object;                collectionLists = collectionApiRes.getCollection();                if (collectionLists != null && collectionLists.size() > 0) {                    collection_id = collectionLists.get(collectionLists.size() - 1).getId();                    if (products.size() == 1)                        addProductInCollection(collection_id, product);                    productInflaterLayout.setVisibility(View.GONE);                    checkLayout.setVisibility(View.GONE);                    cancel_layout1.setVisibility(View.GONE);//                    cancelIcon.setText("CLOSE");                    cancel_layout2.setVisibility(View.VISIBLE);//                    nameYourCollection.setVisibility(View.GONE);//                    newCollectionName.setVisibility(View.VISIBLE);                    addProducts.setVisibility(View.INVISIBLE);                    newCollectionName.setText(collectionLists.get(collectionLists.size() - 1).getName());                }//                squareCheck.setImageResource(R.drawable.white_check_icon);            }            @Override            public void handleOnFailure(ServiceException exception, Object object) {                if (object != null) {                    CollectionApiRes response = (CollectionApiRes) object;                    AlertUtils.showToast(mContext, response.getMessage());                } else {                    AlertUtils.showToast(mContext, R.string.invalid_response);                }            }        });        collectionApi.getCollectionList(UserPreference.getInstance().getUserID());        collectionApi.execute();    }}